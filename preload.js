const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('electron', {
    getCharacters: () => ipcRenderer.invoke('get-characters'),
    getCharacter: (characterName) => ipcRenderer.invoke('get-character', characterName),
    getCharacterImage: (characterName) => ipcRenderer.invoke('get-character-image', characterName),
    createCharacter: (characterName, characterData, imagePath) => ipcRenderer.invoke('create-character', characterName, characterData, imagePath),
    updateCharacter: (originalName, characterData, imagePath) => ipcRenderer.invoke('update-character', originalName, characterData, imagePath),
    deleteCharacter: (characterName) => ipcRenderer.invoke('delete-character', characterName),
    openFileDialog: () => ipcRenderer.invoke('open-file-dialog'),
	getLoadouts: (characterName) => ipcRenderer.invoke('get-loadouts', characterName),
	getLoadout: (characterName, loadoutName) => ipcRenderer.invoke('get-loadout', characterName, loadoutName),
    getLoadoutImage: (characterName, loadoutName) => ipcRenderer.invoke('get-loadout-image', characterName, loadoutName),
    createLoadout: (characterName, loadoutName) => ipcRenderer.invoke('create-loadout', characterName, loadoutName),
    updateLoadout: (characterName, originalName, loadoutData, imagePath) => ipcRenderer.invoke('update-loadout', characterName, originalName, loadoutData, imagePath),
    deleteLoadout: (characterName, loadoutName) => ipcRenderer.invoke('delete-loadout', characterName, loadoutName),
    getInventory: (characterName, loadoutName) => ipcRenderer.invoke('get-inventory', characterName, loadoutName),
    saveInventory: (characterName, loadoutName, items) => ipcRenderer.invoke('save-inventory', characterName, loadoutName, items),
    getInfo: () => ipcRenderer.invoke('get-info'),
    saveInfo: (data) => ipcRenderer.invoke('save-info', data),
    getMapRegion: (regionName, worldName) => ipcRenderer.invoke('get-map-region', regionName, worldName),
    getAdventures: () => ipcRenderer.invoke('get-adventures'),
    createAdventure: (name) => ipcRenderer.invoke('create-adventure', name),
    prepareAdventureCharacter: (saveName, characterName, loadout) => ipcRenderer.invoke('prepare-adventure-character', saveName, characterName, loadout),
    exportCharacter: (name) => ipcRenderer.invoke('export-character', name),
    importCharacter: () => ipcRenderer.invoke('import-character'),
    exportWorld: (name) => ipcRenderer.invoke('export-world', name),
    importWorld: (name) => ipcRenderer.invoke('import-world', name),
    listWorlds: () => ipcRenderer.invoke('list-worlds'),
    createWorld: (name) => ipcRenderer.invoke('create-world', name),
    saveMapRegion: (regionName, worldName, tiles, start) => ipcRenderer.invoke('save-map-region', regionName, worldName, tiles, start)
});